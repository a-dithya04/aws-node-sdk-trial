import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, map, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { CodeGuruReviewerServiceException as __BaseException } from "../models/CodeGuruReviewerServiceException";
import { AccessDeniedException, ConflictException, InternalServerException, NotFoundException, ResourceNotFoundException, ThrottlingException, ValidationException, } from "../models/models_0";
export const se_AssociateRepositoryCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/associations");
    let body;
    body = JSON.stringify(take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        KMSKeyDetails: (_) => _json(_),
        Repository: (_) => _json(_),
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateCodeReviewCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/codereviews");
    let body;
    body = JSON.stringify(take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Name: [],
        RepositoryAssociationArn: [],
        Type: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DescribeCodeReviewCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/codereviews/{CodeReviewArn}");
    b.p("CodeReviewArn", () => input.CodeReviewArn, "{CodeReviewArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DescribeRecommendationFeedbackCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/feedback/{CodeReviewArn}");
    b.p("CodeReviewArn", () => input.CodeReviewArn, "{CodeReviewArn}", false);
    const query = map({
        [_RI]: [, __expectNonNull(input[_RI], `RecommendationId`)],
        [_UI]: [, input[_UI]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_DescribeRepositoryAssociationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/associations/{AssociationArn}");
    b.p("AssociationArn", () => input.AssociationArn, "{AssociationArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DisassociateRepositoryCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/associations/{AssociationArn}");
    b.p("AssociationArn", () => input.AssociationArn, "{AssociationArn}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_ListCodeReviewsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/codereviews");
    const query = map({
        [_PT]: [() => input.ProviderTypes !== void 0, () => (input[_PT] || []).map((_entry) => _entry)],
        [_S]: [() => input.States !== void 0, () => (input[_S] || []).map((_entry) => _entry)],
        [_RN]: [() => input.RepositoryNames !== void 0, () => (input[_RN] || []).map((_entry) => _entry)],
        [_T]: [, __expectNonNull(input[_T], `Type`)],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListRecommendationFeedbackCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/feedback/{CodeReviewArn}/RecommendationFeedback");
    b.p("CodeReviewArn", () => input.CodeReviewArn, "{CodeReviewArn}", false);
    const query = map({
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_UIs]: [() => input.UserIds !== void 0, () => (input[_UIs] || []).map((_entry) => _entry)],
        [_RIe]: [() => input.RecommendationIds !== void 0, () => (input[_RIe] || []).map((_entry) => _entry)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListRecommendationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/codereviews/{CodeReviewArn}/Recommendations");
    b.p("CodeReviewArn", () => input.CodeReviewArn, "{CodeReviewArn}", false);
    const query = map({
        [_NT]: [, input[_NT]],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListRepositoryAssociationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/associations");
    const query = map({
        [_PTr]: [() => input.ProviderTypes !== void 0, () => (input[_PT] || []).map((_entry) => _entry)],
        [_St]: [() => input.States !== void 0, () => (input[_S] || []).map((_entry) => _entry)],
        [_Na]: [() => input.Names !== void 0, () => (input[_N] || []).map((_entry) => _entry)],
        [_Ow]: [() => input.Owners !== void 0, () => (input[_O] || []).map((_entry) => _entry)],
        [_MR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_NT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_PutRecommendationFeedbackCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/feedback");
    let body;
    body = JSON.stringify(take(input, {
        CodeReviewArn: [],
        Reactions: (_) => _json(_),
        RecommendationId: [],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    const query = map({
        [_tK]: [
            __expectNonNull(input.TagKeys, `TagKeys`) != null,
            () => (input[_TK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const de_AssociateRepositoryCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RepositoryAssociation: (_) => de_RepositoryAssociation(_, context),
        Tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateCodeReviewCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CodeReview: (_) => de_CodeReview(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeCodeReviewCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CodeReview: (_) => de_CodeReview(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeRecommendationFeedbackCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RecommendationFeedback: (_) => de_RecommendationFeedback(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeRepositoryAssociationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RepositoryAssociation: (_) => de_RepositoryAssociation(_, context),
        Tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DisassociateRepositoryCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RepositoryAssociation: (_) => de_RepositoryAssociation(_, context),
        Tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListCodeReviewsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CodeReviewSummaries: (_) => de_CodeReviewSummaries(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListRecommendationFeedbackCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        RecommendationFeedbackSummaries: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListRecommendationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        RecommendationSummaries: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListRepositoryAssociationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        RepositoryAssociationSummaries: (_) => de_RepositoryAssociationSummaries(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutRecommendationFeedbackCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.codegurureviewer#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.codegurureviewer#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.codegurureviewer#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.codegurureviewer#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.codegurureviewer#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codegurureviewer#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.codegurureviewer#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_NotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new NotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_CodeReview = (output, context) => {
    return take(output, {
        AnalysisTypes: _json,
        AssociationArn: __expectString,
        CodeReviewArn: __expectString,
        ConfigFileState: __expectString,
        CreatedTimeStamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastUpdatedTimeStamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Metrics: _json,
        Name: __expectString,
        Owner: __expectString,
        ProviderType: __expectString,
        PullRequestId: __expectString,
        RepositoryName: __expectString,
        SourceCodeType: _json,
        State: __expectString,
        StateReason: __expectString,
        Type: __expectString,
    });
};
const de_CodeReviewSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CodeReviewSummary(entry, context);
    });
    return retVal;
};
const de_CodeReviewSummary = (output, context) => {
    return take(output, {
        CodeReviewArn: __expectString,
        CreatedTimeStamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastUpdatedTimeStamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        MetricsSummary: _json,
        Name: __expectString,
        Owner: __expectString,
        ProviderType: __expectString,
        PullRequestId: __expectString,
        RepositoryName: __expectString,
        SourceCodeType: _json,
        State: __expectString,
        Type: __expectString,
    });
};
const de_RecommendationFeedback = (output, context) => {
    return take(output, {
        CodeReviewArn: __expectString,
        CreatedTimeStamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastUpdatedTimeStamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Reactions: _json,
        RecommendationId: __expectString,
        UserId: __expectString,
    });
};
const de_RepositoryAssociation = (output, context) => {
    return take(output, {
        AssociationArn: __expectString,
        AssociationId: __expectString,
        ConnectionArn: __expectString,
        CreatedTimeStamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        KMSKeyDetails: _json,
        LastUpdatedTimeStamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        Owner: __expectString,
        ProviderType: __expectString,
        S3RepositoryDetails: _json,
        State: __expectString,
        StateReason: __expectString,
    });
};
const de_RepositoryAssociationSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RepositoryAssociationSummary(entry, context);
    });
    return retVal;
};
const de_RepositoryAssociationSummary = (output, context) => {
    return take(output, {
        AssociationArn: __expectString,
        AssociationId: __expectString,
        ConnectionArn: __expectString,
        LastUpdatedTimeStamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        Owner: __expectString,
        ProviderType: __expectString,
        State: __expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _MR = "MaxResults";
const _N = "Names";
const _NT = "NextToken";
const _Na = "Name";
const _O = "Owners";
const _Ow = "Owner";
const _PT = "ProviderTypes";
const _PTr = "ProviderType";
const _RI = "RecommendationId";
const _RIe = "RecommendationIds";
const _RN = "RepositoryNames";
const _S = "States";
const _St = "State";
const _T = "Type";
const _TK = "TagKeys";
const _UI = "UserId";
const _UIs = "UserIds";
const _tK = "tagKeys";
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
