import { CodeGuruReviewerServiceException as __BaseException } from "./CodeGuruReviewerServiceException";
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
    }
}
export const AnalysisType = {
    CODE_QUALITY: "CodeQuality",
    SECURITY: "Security",
};
export const EncryptionOption = {
    AoCmk: "AWS_OWNED_CMK",
    CmCmk: "CUSTOMER_MANAGED_CMK",
};
export const ProviderType = {
    BITBUCKET: "Bitbucket",
    CODE_COMMIT: "CodeCommit",
    GIT_HUB: "GitHub",
    GIT_HUB_ENTERPRISE_SERVER: "GitHubEnterpriseServer",
    S3_BUCKET: "S3Bucket",
};
export const RepositoryAssociationState = {
    ASSOCIATED: "Associated",
    ASSOCIATING: "Associating",
    DISASSOCIATED: "Disassociated",
    DISASSOCIATING: "Disassociating",
    FAILED: "Failed",
};
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
    }
}
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.Message = opts.Message;
    }
}
export class ThrottlingException extends __BaseException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.Message = opts.Message;
    }
}
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.Message = opts.Message;
    }
}
export const VendorName = {
    GITHUB: "GitHub",
    GITLAB: "GitLab",
    NATIVE_S3: "NativeS3",
};
export const ConfigFileState = {
    ABSENT: "Absent",
    PRESENT: "Present",
    PRESENT_WITH_ERRORS: "PresentWithErrors",
};
export const JobState = {
    COMPLETED: "Completed",
    DELETING: "Deleting",
    FAILED: "Failed",
    PENDING: "Pending",
};
export const Type = {
    PULL_REQUEST: "PullRequest",
    REPOSITORY_ANALYSIS: "RepositoryAnalysis",
};
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export const Reaction = {
    THUMBS_DOWN: "ThumbsDown",
    THUMBS_UP: "ThumbsUp",
};
export class NotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "NotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "NotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export const RecommendationCategory = {
    AWS_BEST_PRACTICES: "AWSBestPractices",
    AWS_CLOUDFORMATION_ISSUES: "AWSCloudFormationIssues",
    CODE_INCONSISTENCIES: "CodeInconsistencies",
    CODE_MAINTENANCE_ISSUES: "CodeMaintenanceIssues",
    CONCURRENCY_ISSUES: "ConcurrencyIssues",
    DUPLICATE_CODE: "DuplicateCode",
    INPUT_VALIDATIONS: "InputValidations",
    JAVA_BEST_PRACTICES: "JavaBestPractices",
    PYTHON_BEST_PRACTICES: "PythonBestPractices",
    RESOURCE_LEAKS: "ResourceLeaks",
    SECURITY_ISSUES: "SecurityIssues",
};
export const Severity = {
    CRITICAL: "Critical",
    HIGH: "High",
    INFO: "Info",
    LOW: "Low",
    MEDIUM: "Medium",
};
