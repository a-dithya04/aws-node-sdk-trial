import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { CodeGuruReviewerServiceException as __BaseException } from "./CodeGuruReviewerServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export declare const AnalysisType: {
  readonly CODE_QUALITY: "CodeQuality";
  readonly SECURITY: "Security";
};
export type AnalysisType = (typeof AnalysisType)[keyof typeof AnalysisType];
export declare const EncryptionOption: {
  readonly AoCmk: "AWS_OWNED_CMK";
  readonly CmCmk: "CUSTOMER_MANAGED_CMK";
};
export type EncryptionOption =
  (typeof EncryptionOption)[keyof typeof EncryptionOption];
export interface KMSKeyDetails {
  KMSKeyId?: string;
  EncryptionOption?: EncryptionOption;
}
export interface ThirdPartySourceRepository {
  Name: string | undefined;
  ConnectionArn: string | undefined;
  Owner: string | undefined;
}
export interface CodeCommitRepository {
  Name: string | undefined;
}
export interface S3Repository {
  Name: string | undefined;
  BucketName: string | undefined;
}
export interface Repository {
  CodeCommit?: CodeCommitRepository;
  Bitbucket?: ThirdPartySourceRepository;
  GitHubEnterpriseServer?: ThirdPartySourceRepository;
  S3Bucket?: S3Repository;
}
export interface AssociateRepositoryRequest {
  Repository: Repository | undefined;
  ClientRequestToken?: string;
  Tags?: Record<string, string>;
  KMSKeyDetails?: KMSKeyDetails;
}
export declare const ProviderType: {
  readonly BITBUCKET: "Bitbucket";
  readonly CODE_COMMIT: "CodeCommit";
  readonly GIT_HUB: "GitHub";
  readonly GIT_HUB_ENTERPRISE_SERVER: "GitHubEnterpriseServer";
  readonly S3_BUCKET: "S3Bucket";
};
export type ProviderType = (typeof ProviderType)[keyof typeof ProviderType];
export interface CodeArtifacts {
  SourceCodeArtifactsObjectKey: string | undefined;
  BuildArtifactsObjectKey?: string;
}
export interface S3RepositoryDetails {
  BucketName?: string;
  CodeArtifacts?: CodeArtifacts;
}
export declare const RepositoryAssociationState: {
  readonly ASSOCIATED: "Associated";
  readonly ASSOCIATING: "Associating";
  readonly DISASSOCIATED: "Disassociated";
  readonly DISASSOCIATING: "Disassociating";
  readonly FAILED: "Failed";
};
export type RepositoryAssociationState =
  (typeof RepositoryAssociationState)[keyof typeof RepositoryAssociationState];
export interface RepositoryAssociation {
  AssociationId?: string;
  AssociationArn?: string;
  ConnectionArn?: string;
  Name?: string;
  Owner?: string;
  ProviderType?: ProviderType;
  State?: RepositoryAssociationState;
  StateReason?: string;
  LastUpdatedTimeStamp?: Date;
  CreatedTimeStamp?: Date;
  KMSKeyDetails?: KMSKeyDetails;
  S3RepositoryDetails?: S3RepositoryDetails;
}
export interface AssociateRepositoryResponse {
  RepositoryAssociation?: RepositoryAssociation;
  Tags?: Record<string, string>;
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface RepositoryHeadSourceCodeType {
  BranchName: string | undefined;
}
export interface BranchDiffSourceCodeType {
  SourceBranchName: string | undefined;
  DestinationBranchName: string | undefined;
}
export interface CommitDiffSourceCodeType {
  SourceCommit?: string;
  DestinationCommit?: string;
  MergeBaseCommit?: string;
}
export interface EventInfo {
  Name?: string;
  State?: string;
}
export declare const VendorName: {
  readonly GITHUB: "GitHub";
  readonly GITLAB: "GitLab";
  readonly NATIVE_S3: "NativeS3";
};
export type VendorName = (typeof VendorName)[keyof typeof VendorName];
export interface RequestMetadata {
  RequestId?: string;
  Requester?: string;
  EventInfo?: EventInfo;
  VendorName?: VendorName;
}
export interface S3BucketRepository {
  Name: string | undefined;
  Details?: S3RepositoryDetails;
}
export interface SourceCodeType {
  CommitDiff?: CommitDiffSourceCodeType;
  RepositoryHead?: RepositoryHeadSourceCodeType;
  BranchDiff?: BranchDiffSourceCodeType;
  S3BucketRepository?: S3BucketRepository;
  RequestMetadata?: RequestMetadata;
}
export interface RepositoryAnalysis {
  RepositoryHead?: RepositoryHeadSourceCodeType;
  SourceCodeType?: SourceCodeType;
}
export interface CodeReviewType {
  RepositoryAnalysis: RepositoryAnalysis | undefined;
  AnalysisTypes?: AnalysisType[];
}
export interface CreateCodeReviewRequest {
  Name: string | undefined;
  RepositoryAssociationArn: string | undefined;
  Type: CodeReviewType | undefined;
  ClientRequestToken?: string;
}
export declare const ConfigFileState: {
  readonly ABSENT: "Absent";
  readonly PRESENT: "Present";
  readonly PRESENT_WITH_ERRORS: "PresentWithErrors";
};
export type ConfigFileState =
  (typeof ConfigFileState)[keyof typeof ConfigFileState];
export interface Metrics {
  MeteredLinesOfCodeCount?: number;
  SuppressedLinesOfCodeCount?: number;
  FindingsCount?: number;
}
export declare const JobState: {
  readonly COMPLETED: "Completed";
  readonly DELETING: "Deleting";
  readonly FAILED: "Failed";
  readonly PENDING: "Pending";
};
export type JobState = (typeof JobState)[keyof typeof JobState];
export declare const Type: {
  readonly PULL_REQUEST: "PullRequest";
  readonly REPOSITORY_ANALYSIS: "RepositoryAnalysis";
};
export type Type = (typeof Type)[keyof typeof Type];
export interface CodeReview {
  Name?: string;
  CodeReviewArn?: string;
  RepositoryName?: string;
  Owner?: string;
  ProviderType?: ProviderType;
  State?: JobState;
  StateReason?: string;
  CreatedTimeStamp?: Date;
  LastUpdatedTimeStamp?: Date;
  Type?: Type;
  PullRequestId?: string;
  SourceCodeType?: SourceCodeType;
  AssociationArn?: string;
  Metrics?: Metrics;
  AnalysisTypes?: AnalysisType[];
  ConfigFileState?: ConfigFileState;
}
export interface CreateCodeReviewResponse {
  CodeReview?: CodeReview;
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export interface DescribeCodeReviewRequest {
  CodeReviewArn: string | undefined;
}
export interface DescribeCodeReviewResponse {
  CodeReview?: CodeReview;
}
export interface DescribeRecommendationFeedbackRequest {
  CodeReviewArn: string | undefined;
  RecommendationId: string | undefined;
  UserId?: string;
}
export declare const Reaction: {
  readonly THUMBS_DOWN: "ThumbsDown";
  readonly THUMBS_UP: "ThumbsUp";
};
export type Reaction = (typeof Reaction)[keyof typeof Reaction];
export interface RecommendationFeedback {
  CodeReviewArn?: string;
  RecommendationId?: string;
  Reactions?: Reaction[];
  UserId?: string;
  CreatedTimeStamp?: Date;
  LastUpdatedTimeStamp?: Date;
}
export interface DescribeRecommendationFeedbackResponse {
  RecommendationFeedback?: RecommendationFeedback;
}
export interface DescribeRepositoryAssociationRequest {
  AssociationArn: string | undefined;
}
export interface DescribeRepositoryAssociationResponse {
  RepositoryAssociation?: RepositoryAssociation;
  Tags?: Record<string, string>;
}
export declare class NotFoundException extends __BaseException {
  readonly name: "NotFoundException";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<NotFoundException, __BaseException>);
}
export interface DisassociateRepositoryRequest {
  AssociationArn: string | undefined;
}
export interface DisassociateRepositoryResponse {
  RepositoryAssociation?: RepositoryAssociation;
  Tags?: Record<string, string>;
}
export interface ListCodeReviewsRequest {
  ProviderTypes?: ProviderType[];
  States?: JobState[];
  RepositoryNames?: string[];
  Type: Type | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface MetricsSummary {
  MeteredLinesOfCodeCount?: number;
  SuppressedLinesOfCodeCount?: number;
  FindingsCount?: number;
}
export interface CodeReviewSummary {
  Name?: string;
  CodeReviewArn?: string;
  RepositoryName?: string;
  Owner?: string;
  ProviderType?: ProviderType;
  State?: JobState;
  CreatedTimeStamp?: Date;
  LastUpdatedTimeStamp?: Date;
  Type?: Type;
  PullRequestId?: string;
  MetricsSummary?: MetricsSummary;
  SourceCodeType?: SourceCodeType;
}
export interface ListCodeReviewsResponse {
  CodeReviewSummaries?: CodeReviewSummary[];
  NextToken?: string;
}
export interface ListRecommendationFeedbackRequest {
  NextToken?: string;
  MaxResults?: number;
  CodeReviewArn: string | undefined;
  UserIds?: string[];
  RecommendationIds?: string[];
}
export interface RecommendationFeedbackSummary {
  RecommendationId?: string;
  Reactions?: Reaction[];
  UserId?: string;
}
export interface ListRecommendationFeedbackResponse {
  RecommendationFeedbackSummaries?: RecommendationFeedbackSummary[];
  NextToken?: string;
}
export interface ListRecommendationsRequest {
  NextToken?: string;
  MaxResults?: number;
  CodeReviewArn: string | undefined;
}
export declare const RecommendationCategory: {
  readonly AWS_BEST_PRACTICES: "AWSBestPractices";
  readonly AWS_CLOUDFORMATION_ISSUES: "AWSCloudFormationIssues";
  readonly CODE_INCONSISTENCIES: "CodeInconsistencies";
  readonly CODE_MAINTENANCE_ISSUES: "CodeMaintenanceIssues";
  readonly CONCURRENCY_ISSUES: "ConcurrencyIssues";
  readonly DUPLICATE_CODE: "DuplicateCode";
  readonly INPUT_VALIDATIONS: "InputValidations";
  readonly JAVA_BEST_PRACTICES: "JavaBestPractices";
  readonly PYTHON_BEST_PRACTICES: "PythonBestPractices";
  readonly RESOURCE_LEAKS: "ResourceLeaks";
  readonly SECURITY_ISSUES: "SecurityIssues";
};
export type RecommendationCategory =
  (typeof RecommendationCategory)[keyof typeof RecommendationCategory];
export interface RuleMetadata {
  RuleId?: string;
  RuleName?: string;
  ShortDescription?: string;
  LongDescription?: string;
  RuleTags?: string[];
}
export declare const Severity: {
  readonly CRITICAL: "Critical";
  readonly HIGH: "High";
  readonly INFO: "Info";
  readonly LOW: "Low";
  readonly MEDIUM: "Medium";
};
export type Severity = (typeof Severity)[keyof typeof Severity];
export interface RecommendationSummary {
  FilePath?: string;
  RecommendationId?: string;
  StartLine?: number;
  EndLine?: number;
  Description?: string;
  RecommendationCategory?: RecommendationCategory;
  RuleMetadata?: RuleMetadata;
  Severity?: Severity;
}
export interface ListRecommendationsResponse {
  RecommendationSummaries?: RecommendationSummary[];
  NextToken?: string;
}
export interface ListRepositoryAssociationsRequest {
  ProviderTypes?: ProviderType[];
  States?: RepositoryAssociationState[];
  Names?: string[];
  Owners?: string[];
  MaxResults?: number;
  NextToken?: string;
}
export interface RepositoryAssociationSummary {
  AssociationArn?: string;
  ConnectionArn?: string;
  LastUpdatedTimeStamp?: Date;
  AssociationId?: string;
  Name?: string;
  Owner?: string;
  ProviderType?: ProviderType;
  State?: RepositoryAssociationState;
}
export interface ListRepositoryAssociationsResponse {
  RepositoryAssociationSummaries?: RepositoryAssociationSummary[];
  NextToken?: string;
}
export interface ListTagsForResourceRequest {
  resourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  Tags?: Record<string, string>;
}
export interface PutRecommendationFeedbackRequest {
  CodeReviewArn: string | undefined;
  RecommendationId: string | undefined;
  Reactions: Reaction[] | undefined;
}
export interface PutRecommendationFeedbackResponse {}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  Tags: Record<string, string> | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
